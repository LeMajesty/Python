1.def product(a, b):
"""Return product of a and b.

    >>> product(2, 2)
    4

    >>> product(2, -2)
    -4
"""

return a * b

2.DAYS = [
"Sunday",
"Monday",
"Tuesday",
"Wednesday",
"Thursday",
"Friday",
"Saturday",
]

if day_of_week < 1 or day_of_week > 7:
return None

return DAYS[day_of_week - 1]

3.   if lst:
return lst[-1]

4. if a > b:
return "First is greater"
elif b > a:
return "Second is greater"
else:
return "Numbers are equal"

5.  return phrase[::-1]

6.  return word.lower().count(letter.lower())

7.  counter = {}

for ltr in phrase:
    counter[ltr] = counter.get(ltr, 0) + 1

return counter

8. if command == "remove":
if location == "end":
    return lst.pop()
elif location == "beginning":
    return lst.pop(0)

elif command == "add":
if location == "beginning":
    lst.insert(0, value)
    return lst
elif location == "end":
    lst.append(value)
    return lst

9. normalized = phrase.lower().replace(' ', '')
return normalized == normalized[::-1]

10.  return lst.count(search_term)

11.  to_swap = to_swap.lower()
out = ""

for ltr in phrase:
    if ltr.lower() == to_swap:
        ltr = ltr.swapcase()
    out += ltr

return out

12. product = 1

for num in nums:
    if num % 2 == 0:
        product = product * num

return product

13. return phrase.capitalize()

14.   return [val for val in lst if val]

15.  set2 = set(l2)

return [val for val in l1 if val in set2]

16. true_list = []
false_list = []

for val in lst:
    if fn(val):
        true_list.append(val)
    else:
        false_list.append(val)

return [true_list, false_list]

17.  counts = {}

for num in nums:
    counts[num] = counts.get(num, 0) + 1 
    max_value = max(counts.values())
    for (num, freq) in counts.items():
        if freq == max_value:
            return num

18. if operation == "add":
res = a + b
elif operation == "subtract":
res = a - b
elif operation == "multiply":
res = a * b
elif operation == "divide":
res = a / b
else:
return

if make_int:
res = int(res)

return f"{message} {res}"

19. if set(a[2]) & set(b[2]):
return True
else:
return False

20. return [num * 3 for num in nums if num % 4 == 0]

21. return [f"{person['first']} {person['last']}" for person in people]

22. return sum([num for num in nums if isinstance(num, float)])

23. for item in lst:
if not isinstance(item, list):
    return False

return True

24. return lst[::2]

25. already_visited = set()

for i in nums:
    difference = goal - i

    if difference in already_visited:
        return (difference, i)

    already_visited.add(i)

return ()

26.  phrase = phrase.lower()
counter = {}

for ltr in phrase:
    if ltr in VOWELS:
        counter[ltr] = counter.get(ltr, 0) + 1

return counter

27. return phrase.title()

28.  n_list = [n for n in range (1, num // 2 + 1) if num % n == 0]

n_list.append(num)

return n_list

29. if isinstance(collection, dict):
return sought in collection.values()

if start is None or isinstance(collection, set):
return sought in collection

return sought in collection[start:]


30. if not isinstance(num, int) or num < 0:
return None

return phrase * num

31. if n < 3:
return "Truncation must be at least 3 characters."

if n > len(phrase) + 2:
return phrase

return phrase[:n - 3] + "..."

32. out = {}

for idx, val in enumerate(keys):
    out[val] = values[idx] if idx < len(values) else None

return out

33. if end is None:
end = len(nums)

return sum(nums[start:end + 1])

34. counts = {}

for x in coll:
    counts[x] = counts.get(x, 0) + 1

return counts


def same_frequency(num1, num2):
"""Do these nums have same frequencies of digits?

        >>> same_frequency(551122, 221515)
        True

        >>> same_frequency(321142, 3212215)
        False

        >>> same_frequency(1212, 2211)
        True
    """

    return freq_counter(str(num1)) == freq_counter(str(num2))

35. uniq_ages = set(ages)
oldest = sorted(uniq_ages)[-2:]
return tuple(oldest)

36. seen = set()

for num in nums:
    if num in seen:
        return num
    seen.add(num)

37.  total = 0

for i in range(len(matrix)):
    total += matrix[i][i]
    total += matrix[i][-1 - i]

return total

38.  keys = d.keys()

return (min(keys), max(keys))

39.  count = 0

for i in range(len(nums)):
    for j in range(i + 1, len(nums)):
        if nums[j] > nums[i]:
            count += 1

return count
